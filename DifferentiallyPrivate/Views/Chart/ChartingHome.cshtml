@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model DifferentiallyPrivate.Models.MultiChart

<div id="viewContent">
    <h3>Home Charting</h3>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css">
    <style>
        label {
        }
        .ui-tooltip {
            padding:2px 3px;
            border:1px solid #426E6F;

            border-left:none;
            border-bottom-left-radius:0px;
            border-top-left-radius:0px;
        }
        .ui-tooltip-content {
            font-size:0.6em;
            
        }
    </style>
    <script src="//code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
    <script>
        $(document).ready(function () {
            HideLoading();
            HideChartInput();
            $("#deltaInput").hide();
            $("#noiseType").change(function () {
                if ($(this).val() == "gaussian") {
                    $("#deltaInput").show();
                }
                else {
                    $("#deltaInput").hide();
                }
            });

            $(".mainTextbox").tooltip({
                position: { my: "left+0 center", at: "right center" },
                show: { effect: "slide", duration: 600 }});
            $(document).tooltip();

        });

        function ShowChartInput() {
            ShowDarkScreen();
            $("#chartInput").show();
        }

        function HideChartInput() {
            HideDarkScreen();
            $("#chartInput").hide();
        }

        function ShowLoading() {
            ShowDarkScreen();
            $("#loadingPanel").show();
        };

        function HideLoading() {
            HideDarkScreen();
            $("#loadingPanel").hide();
        };
    </script>
    
    <!-- Added charts section -->
    @Html.Raw(Html.ValidationMessageFor(x => x).ToString())
    <div id="chartsAdded">
        @if (Model.allHomeCharts.Count > 1) //If number of charts is 1, only the new unedited chart exists
        {
            for (int i = 0; i < Model.allHomeCharts.Count - 1; i++) //Trim off new unedited chart model - default values (not added by user)
            {
                <div class="queryListing">
		            <div class="queryHeading">
			            <h4 style="float:left;color:cadetblue;">Chart @Model.allHomeCharts[i].id</h4>
                        @using (Html.BeginForm("ChartingHome", "Chart", FormMethod.Post))
                        {
                            for (int j = 0; j < Model.allHomeCharts.Count - 1; j++)
                            {
                                //Cache all chart data as hidden fields
                                @Html.HiddenFor(c => Model.allHomeCharts[j].binCount_input)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].data_cat_input)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].timespan_input)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].epsilon_input)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].iterations_input)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].queryType_input)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].noiseType_input)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].delta_input)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].id)

                                @Html.HiddenFor(c => Model.allHomeCharts[j].data_cats)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].noise_types)
                                @Html.HiddenFor(c => Model.allHomeCharts[j].query_types)
                            }
                            @Html.Hidden("removeId", i)
                            <input type="submit" class="xButton" value="" />
                        }
		            </div>
		            <div class="queryBody">
                        @if (Model.allHomeCharts[i].queryType_input == "avg")
                        {
			                <text>Average query</text>
                        }
                        else
                        {
			                <text>Median query</text>
                        }

                        using @(Model.allHomeCharts[i].noiseType_input).<br />
			            @(Model.allHomeCharts[i].iterations_input) iterations; @(Model.allHomeCharts[i].binCount_input) bins<br/>
			            ε = @(Model.allHomeCharts[i].epsilon_input); δ = @(Model.allHomeCharts[i].delta_input) [Gaussian only]<br/>
			            Category = @(Model.allHomeCharts[i].data_cat_input); Timespan = @(Model.allHomeCharts[i].timespan_input)
		            </div>
	            </div>
            }
        }
        else
        {
            <p>No queries added.</p>
        }
    </div>
    <div style="clear:both"></div>
    
    <!-- Add Query/Clear All/Generate buttons -->
    <input type="button" value="Add Query" onclick="ShowChartInput()" class="mainButton" style="margin-top:10px;" />
    @using (Html.BeginForm("ChartingHome", "Chart", FormMethod.Get))
    {
        <input type="submit" value="Clear All" class="mainButton" />
    }
    @using (Ajax.BeginForm("ChartingHome", "Chart", new AjaxOptions
    {
        UpdateTargetId = "MainChart",
        OnBegin = "return ShowLoading()",
        OnSuccess = "return HideLoading()"
    }))
    {
        for (int i = 0; i < Model.allHomeCharts.Count - 1; i++)
        {
            //Cache all chart data as hidden fields
            @Html.HiddenFor(c => Model.allHomeCharts[i].binCount_input)
            @Html.HiddenFor(c => Model.allHomeCharts[i].data_cat_input)
            @Html.HiddenFor(c => Model.allHomeCharts[i].timespan_input)
            @Html.HiddenFor(c => Model.allHomeCharts[i].epsilon_input)
            @Html.HiddenFor(c => Model.allHomeCharts[i].iterations_input)
            @Html.HiddenFor(c => Model.allHomeCharts[i].queryType_input)
            @Html.HiddenFor(c => Model.allHomeCharts[i].noiseType_input)
            @Html.HiddenFor(c => Model.allHomeCharts[i].delta_input)
            @Html.HiddenFor(c => Model.allHomeCharts[i].id)
            @Html.HiddenFor(c => Model.allHomeCharts[i].data_cats)
            @Html.HiddenFor(c => Model.allHomeCharts[i].noise_types)
            @Html.HiddenFor(c => Model.allHomeCharts[i].query_types)
        }
        <input id="submit" type="submit" value="Generate Query Charts" class="mainButton" />
    }
    
    <!-- Loading Pane - Only visible during AJAX call to generate charts -->
    <div id="loadingPanel">
        <img src="~/Content/img/logo.png" width="50px" /><br />
        Generating charts..<br />
        <img src="~/Content/img/ajax-loader.gif" style="margin-top:10px;"/>
    </div>
    
    <!-- Input Pane - Only visible during adding queries -->
    <div id="chartInput">
        @using (Html.BeginForm("ChartingHome", "Chart", FormMethod.Post))
        {
            for (int i = 0; i < Model.allHomeCharts.Count - 1; i++)
            {
                //Cache all chart data as hidden fields
                @Html.HiddenFor(c => Model.allHomeCharts[i].binCount_input)
                @Html.HiddenFor(c => Model.allHomeCharts[i].data_cat_input)
                @Html.HiddenFor(c => Model.allHomeCharts[i].timespan_input)
                @Html.HiddenFor(c => Model.allHomeCharts[i].epsilon_input)
                @Html.HiddenFor(c => Model.allHomeCharts[i].iterations_input)
                @Html.HiddenFor(c => Model.allHomeCharts[i].queryType_input)
                @Html.HiddenFor(c => Model.allHomeCharts[i].noiseType_input)
                @Html.HiddenFor(c => Model.allHomeCharts[i].delta_input)
                @Html.HiddenFor(c => Model.allHomeCharts[i].id)
                @Html.HiddenFor(c => Model.allHomeCharts[i].data_cats)
                @Html.HiddenFor(c => Model.allHomeCharts[i].noise_types)
                @Html.HiddenFor(c => Model.allHomeCharts[i].query_types)
            }
            @Html.HiddenFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].id)
            //}
            <img src="~/Content/img/logo.png" width="50px" />
            <h4>New Query</h4>
            <p>Mouse over fields for validation details</p>
            <table>
                <tr>
                    <td>
                        @Html.LabelFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].iterations_input)
                    </td>
                    <td>
                        @Html.TextBoxFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].iterations_input, new { @class = "mainTextbox", @title = "Range: 0 - 100000" })
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].epsilon_input)
                    </td>
                    <td>
                        @Html.TextBoxFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].epsilon_input, new { @class = "mainTextbox", @title = "Range: 0.0+" })
                    </td>
                </tr>
                <tr>
                    <td>
                        @Html.LabelFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].binCount_input)
                    </td>
                    <td>
                        @Html.TextBoxFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].binCount_input, new { @class = "mainTextbox", @title = "Range: 0 - 250" })
                    </td>
                </tr>

                <tr>
                    <td>
                        @Html.LabelFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].queryType_input)
                    </td>
                    <td>
                        @Html.DropDownListFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].queryType_input,
                                              new SelectList(Model.allHomeCharts[Model.allHomeCharts.Count - 1].query_types, "Value", "Text"),
                                              new { @class = "mainDropdown" })
                    </td>
                </tr>

                <tr>
                    <td>
                        @Html.LabelFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].data_cat_input)
                    </td>
                    <td>
                        @Html.DropDownListFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].data_cat_input,
                                              new SelectList(Model.allHomeCharts[Model.allHomeCharts.Count - 1].data_cats, "Value", "Text"),
                                              new { @class = "mainDropdown" })
                    </td>
                </tr>

                <tr>
                    <td>
                        @Html.LabelFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].timespan_input)
                    </td>
                    <td>
                        @Html.DropDownListFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].timespan_input,
                                              new SelectList(Model.allHomeCharts[Model.allHomeCharts.Count - 1].timespans, "Value", "Text"),
                                              new { @class = "mainDropdown" })
                    </td>
                </tr>
                
                <tr>
                    <td>
                        @Html.LabelFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].noiseType_input)
                    </td>
                    <td>
                        @Html.DropDownListFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].noiseType_input,
                                              new SelectList(Model.allHomeCharts[Model.allHomeCharts.Count - 1].noise_types, "Value", "Text"),
                                              new { @id = "noiseType", @class = "mainDropdown" })
                    </td>
                </tr>

                <tr id="deltaInput">
                    <td>
                        @Html.LabelFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].delta_input)
                    </td>
                    <td>
                        @Html.TextBoxFor(c => Model.allHomeCharts[Model.allHomeCharts.Count - 1].delta_input, new { @class = "mainTextbox", @title = "Greater than 0.0, less than 1.0" })
                    </td>
                </tr>
                <tr style="padding-top:10px;">
                    <td>
                        <input type="submit" value="Add" onclick="HideChartInput()" class="mainButton" />
                    </td>
                    <td style="text-align:right;">
                        <input type="button" value="Cancel" onclick="HideChartInput()" class="mainButton" />
                    </td>
                </tr>
            </table>
        }
    </div>
    
    <!-- Chart Pane - always visible, not always populated - target for returned complete charts -->
    <div id="MainChart">
    </div>  
</div>